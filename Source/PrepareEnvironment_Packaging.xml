<gel:script 
 xmlns:core="jelly:core" 
    xmlns:gel="jelly:com.niku.union.gel.GELTagLibrary"
    xmlns:soap="jelly:com.niku.union.gel.SOAPTagLibrary"
    xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/"	    
    xmlns:sql="jelly:sql"
    xmlns:xog="http://www.niku.com/xog"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:file="jelly:com.niku.union.gel.FileTagLibrary"
    xmlns:util="jelly:util"
    xmlns:q="http://www.niku.com/xog/Query">
	

   	<!--============================================================-->
	<!-- Package: Studio Projects Packaging 2.0						-->
	<!-- Process: Various											-->
	<!-- Step	: Start												-->
	<!-- Action	: Prepare Environment								-->
   	<!--============================================================-->
	<!-- Create environment variables and Login to XOG 				-->
   	<!--============================================================-->

    <gel:parameter default="admin" var="XOGUsername"/>
    <gel:parameter default="c" var="XOGPassword"/>
	<gel:parameter default="1" var="pDebugLevel"/>
	<gel:setDataSource dbId="Niku"/>

	<core:set var="vStudioProjectID" value="${gel_objectInstanceId}"/>
	<core:set var="DebugLevel" value="${pDebugLevel}"/>

	<core:if test="${DebugLevel &gt; 0}">
		<gel:log level="INFO" message="Start Script"/>
		<gel:log level="INFO" message="Studio Project: ${vStudioProjectID} debug level ${DebugLevel}"/> 
	</core:if>
	
	<!-- Determine InstallDir and Find LogFilder -->
	<core:invokeStatic var="config" className="com.niku.union.config.ConfigurationManager" method="getInstance"/>
	<core:set var="vInstallDirRead" value="${config.getProperties().getDirectories().getInstallDir()}"/>
	<core:if test="${DebugLevel &gt; 1}">
		<gel:log level="INFO" message="vInstallDirRead :  ${vInstallDirRead}"/>
	</core:if>
	
	<core:invoke var="vInstallDirTemp" on="${vInstallDirRead}" method="replaceAll">
		<core:arg type="java.lang.String" value="\\\\"/>
		<core:arg type="java.lang.String" value="\\"/>
	</core:invoke>

	<core:invoke var="vInstallDir" on="${vInstallDirTemp}" method="replace">
		<core:arg type="char" value="\"/>
		<core:arg type="char" value="/"/>
	</core:invoke>
	
	<core:if test="${DebugLevel &gt; 1}">
		<core:if test="${DebugLevel &gt; 2}">
			<gel:log level="INFO" message="vInstallDirRead :  ${vInstallDirRead}"/>
			<gel:log level="INFO" message="vInstallDirTemp :  ${vInstallDirTemp}"/>
		</core:if>
		<gel:log level="INFO" message="vInstallDir :  ${vInstallDir}"/>
	</core:if>
	
	<core:set var="XOGlogFolder" value="${vInstallDir}/logs"/>
	
	<core:if test="${DebugLevel &gt; 1}">
		<gel:log level="INFO" message="XOGlogFolder: ${XOGlogFolder}"/> 
	</core:if>
	
	<!-- Find the APP service to determine entryUrl and entryPort -->
	<!-- Gets ID from Instance 0-->
    <core:set var="WebServerid" value="${config.getProperties().getWebServer().getWebServerInstance(0).getId()}"/>
	<!-- Tests if Instance 0 is app - then gets instance 0 data -->
	<core:if test="${WebServerid == 'app'}">
		<core:set var="SSLEnabled" value="${config.getProperties().getWebServer().getWebServerInstance(0).getEnableSSLPort()}"/>
		<core:if test="${SSLEnabled == 'false'}">
			<core:set var="entryUrl" value="${config.getProperties().getWebServer().getWebServerInstance(0).getEntryUrl()}"/>
			<core:set var="entryUrlPort" value="${config.getProperties().getWebServer().getWebServerInstance(0).getPort()}"/>
		</core:if>
		<core:if test="${SSLEnabled == 'true'}">
			<core:set var="entryUrl" value="${config.getProperties().getWebServer().getWebServerInstance(0).getSslEntryUrl()}"/>
		</core:if>
	</core:if>
	<!-- Tests if Instance 0 is no app - then gets instance 1 data -->
	<core:if test="${WebServerid != 'app'}">
		<core:set var="WebServerid" value="${config.getProperties().getWebServer().getWebServerInstance(1).getId()}"/>
		<!-- Tests if Instance 1 is app - then gets instance 1 data -->
		<core:if test="${WebServerid == 'app'}">
			<core:set var="SSLEnabled" value="${config.getProperties().getWebServer().getWebServerInstance(1).getEnableSSLPort()}"/>
			<core:if test="${SSLEnabled == 'false'}">
				<core:set var="entryUrl" value="${config.getProperties().getWebServer().getWebServerInstance(1).getEntryUrl()}"/>
				<core:set var="entryUrlPort" value="${config.getProperties().getWebServer().getWebServerInstance(1).getPort()}"/>
			</core:if>
			<core:if test="${SSLEnabled == 'true'}">
				<core:set var="entryUrl" value="${config.getProperties().getWebServer().getWebServerInstance(1).getSslEntryUrl()}"/>
			</core:if>
		</core:if>
		<!-- Tests if Instance 1 is not app - then reads instance 2 -->
		<core:if test="${WebServerid != 'app'}">
			<core:set var="WebServerid" value="${config.getProperties().getWebServer().getWebServerInstance(2).getId()}"/>
			<core:if test="${WebServerid == 'app'}">
				<core:set var="SSLEnabled" value="${config.getProperties().getWebServer().getWebServerInstance(2).getEnableSSLPort()}"/>
				<core:if test="${SSLEnabled == 'false'}">
					<core:set var="entryUrl" value="${config.getProperties().getWebServer().getWebServerInstance(2).getEntryUrl()}"/>
					<core:set var="entryUrlPort" value="${config.getProperties().getWebServer().getWebServerInstance(2).getPort()}"/>
				</core:if>
				<core:if test="${SSLEnabled == 'true'}">
					<core:set var="entryUrl" value="${config.getProperties().getWebServer().getWebServerInstance(2).getSslEntryUrl()}"/>
				</core:if>
			</core:if>
			<core:if test="${WebServerid != 'app'}">
				<gel:log level="ERROR" message="WebServerid	APP not Found!"/>
			</core:if>
		</core:if>
	</core:if>

	<!-- This should work with NA Servers where SSL is implemented in Apache and CA PPM is unaware of it -->
	<core:invoke var="vProtocol" on="${entryUrl}" method="substring">
		<core:arg type="int" value="0"/>
		<core:arg type="int" value="5"/>
	</core:invoke>
	<core:if test="${vProtocol == 'https'}">
		<core:set var="SSLEnabled" value="true"/>
	</core:if>

	<core:if test="${DebugLevel &gt; 1}">
		<gel:log level="INFO" message="WebServerid	: ${WebServerid}"/> 
		<gel:log level="INFO" message="entryUrl	: ${entryUrl}"/> 
		<gel:log level="INFO" message="entryUrlPort: ${entryUrlPort}"/> 
	</core:if>

	<core:set var="XOGURL" value="${entryUrl}:${entryUrlPort}"/>
	<core:if test="${SSLEnabled == 'true'}">
		<core:set var="XOGURL" value="${entryUrl}"/>
	</core:if>
	<core:set var="XOGEndPoint" value="internal"/>
	<core:if test="${DebugLevel &gt; 1}">
		<gel:log level="INFO" message="XOGEndPoint: ${XOGEndPoint}"/>
		<gel:log level="INFO" message="XOGURL: ${XOGURL}"/>
	</core:if>

	<!-- Get Database Vendor -->
    <core:set var="dbVendor" value="${config.getProperties().getDatabaseServer().getVendor().toString()}"/>
	<core:if test="${DebugLevel &gt; 1}">
		<gel:log level="INFO" message="DBVendor: ${dbVendor}"/>
	</core:if>
	
    <!-- Log in to XOG-->
    <soap:invoke endpoint="${XOGEndPoint}" var="auth">
        <soap:message>
            <soapenv:Envelope
                xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xog="http://www.niku.com/xog">
                <soapenv:Header/>
                <soapenv:Body>
                    <xog:Login>
                        <xog:Username>${XOGUsername}</xog:Username>
                        <xog:Password>${XOGPassword}</xog:Password>
                    </xog:Login>
                </soapenv:Body>
            </soapenv:Envelope>
        </soap:message>
    </soap:invoke>
    <gel:set asString="true"
        select="$auth/soapenv:Envelope/soapenv:Body/xog:SessionID/text()" var="sessionID"/>
    <core:choose>
	<core:if test="${DebugLevel &gt; 1}">
		<gel:serialize var="${auth}" fileName="${XOGlogFolder}/auth.xml"/>
	</core:if>
        <!-- Check XOG sessionID -->
        <core:when test="${sessionID == null}">
            <gel:log category="XOG" level="ERROR">Couldn't Log in to XOG. Please verify the username/password.</gel:log>
			<sql:update>
				UPDATE ODF_CA_STPROJ_PROJECT 
				SET packaging = 'Error' 
				WHERE id = ${vStudioProjectID}
			</sql:update>
        </core:when>
        <core:otherwise>
			<core:if test="${DebugLevel &gt; 1}">
				<gel:log level="INFO" message="[XOG] Login Successful. ${sessionID}."/> 
			</core:if>
	
			<sql:query escapeText="false" var="vProject">
				select SP.PROJECT_CODE, SP.PACKAGING_PATH, SP.PUBLISH
				from odf_ca_stproj_project SP
				Where SP.id = ${vStudioProjectID}
			</sql:query>
			<core:forEach items="${vProject.rowsByIndex}" var="row">
				<core:set var="vProjectCode">${row[0]}</core:set>
				<core:set var="vPackagingPath">${row[1]}</core:set>
				<core:set var="vPublish">${row[2]}</core:set>
				<core:if test="${DebugLevel &gt; 1}">
					<gel:log level="INFO" message="vProjectCode  : ${vProjectCode}"/> 
					<gel:log level="INFO" message="vPackagingPath: ${vPackagingPath} (Publish=${vPublish})"/> 
				</core:if>
			</core:forEach>

			<!-- Temp Log Files available over the web -->
			<core:set var="logs_dir_to_create" value="${vInstallDir}/webroot/stproj_logs/${vProjectCode}"/>
			<util:file name="${logs_dir_to_create}" var="logsfoldervar" />
			<core:set var="FolderExists" value="${logsfoldervar.exists()}"/>
			<core:if test="${DebugLevel &gt; 1}">
				<gel:log level="INFO" message="FolderExists      : ${FolderExists}"/>
			</core:if>
			<!-- if default folder already exists, it must be deleted -->
			<core:if test="${FolderExists == true}">
				<core:set var="logsListOfFiles" value="${logsfoldervar.listFiles()}" />
				<!-- First, delete all files -->
				<core:forEach items="${logsListOfFiles}" var="row">
					<core:set var="vFile">${row}</core:set>
					<core:if test="${DebugLevel &gt; 1}">
						<gel:log level="INFO" message="vFile      : ${vFile}"/>
					</core:if>
					<util:file name="${vFile}" var="filevar" />
					<core:set var="deleteDone" value="${filevar.delete()}" />
					<core:if test="${DebugLevel &gt; 1}">
						<gel:log level="INFO" message="deleteDone for File : ${deleteDone}"/>
					</core:if>
				</core:forEach>
				<!-- Then delete folder -->
				<core:set var="deleteDone" value="${logsfoldervar.delete()}" />
				<core:if test="${DebugLevel &gt; 1}">
					<gel:log level="INFO" message="deleteDone for Folder : ${deleteDone}"/>
				</core:if>
			</core:if>
			<!-- Then create the new folder mkdirs will create all intermediate parent folders  -->
			<core:set var="CreateLogsDirDone" value="${logsfoldervar.mkdirs()}" />
			<core:if test="${DebugLevel &gt; 1}">
				<gel:log level="INFO" message="CreateLogsDirDone : ${CreateLogsDirDone}"/>
			</core:if>				
			<core:set var="XOGwebFolder" value="${logs_dir_to_create}"/>
			<core:set var="XOGwebPath" value="${XOGURL}/niku/stproj_logs/${vProjectCode}"/>
			
			<!-- vPackagingPath has been specified === create it -->
			<core:if test="${vPackagingPath!=''}">
				<core:set var="dir_to_create">${vPackagingPath}</core:set>
				<util:file name="${dir_to_create}" var="foldervar" />
				<core:set var="CreateDirDone" value="${foldervar.mkdirs()}" />
				<core:if test="${DebugLevel &gt; 1}">
					<gel:log level="INFO" message="CreateDirDone : ${CreateDirDone}"/>
				</core:if>				
			</core:if>

			<!-- vPackagingPath has NOT been specified === create default folder under webroot/StudioProjects-Temp -->
			<core:if test="${vPackagingPath==''}">
				<core:set var="dir_to_create" value="${vInstallDir}/webroot/StudioProjects-Temp/${vProjectCode}"/>
				<util:file name="${dir_to_create}" var="foldervar" />
				<core:set var="FolderExists" value="${foldervar.exists()}"/>
				<core:if test="${DebugLevel &gt; 1}">
					<gel:log level="INFO" message="FolderExists      : ${FolderExists}"/>
				</core:if>
				<!-- if default folder already exists, it must be deleted -->
				<core:if test="${FolderExists == true}">
					<core:set var="listOfFiles" value="${foldervar.listFiles()}" />
					<!-- First, delete all files -->
					<core:forEach items="${listOfFiles}" var="row">
						<core:set var="vFile">${row}</core:set>
						<core:if test="${DebugLevel &gt; 1}">
							<gel:log level="INFO" message="vFile      : ${vFile}"/>
						</core:if>
						<util:file name="${vFile}" var="filevar" />
						<core:set var="deleteDone" value="${filevar.delete()}" />
						<core:if test="${DebugLevel &gt; 1}">
							<gel:log level="INFO" message="deleteDone for File : ${deleteDone}"/>
						</core:if>
					</core:forEach>
					<!-- Then delete folder -->
					<core:set var="deleteDone" value="${foldervar.delete()}" />
					<core:if test="${DebugLevel &gt; 1}">
						<gel:log level="INFO" message="deleteDone for Folder : ${deleteDone}"/>
					</core:if>
				</core:if>
				<!-- Then create the new folder mkdirs will create all intermediate parent folders  -->
				<core:set var="CreateDirDone" value="${foldervar.mkdirs()}" />
				<core:if test="${DebugLevel &gt; 1}">
					<gel:log level="INFO" message="CreateDirDone : ${CreateDirDone}"/>
				</core:if>				
				<core:set var="vPackagingPath" value="${dir_to_create}"/>
				<sql:update>
					update ODF_CA_STPROJ_PROJECT set PACKAGING_PATH='${vPackagingPath}' 
					where id = ${vStudioProjectID}
				</sql:update>
			</core:if>
				
			<!--Create Publish folder under WebRoot -->
			<core:if test="${vPublish == 1}">
				<core:set var="publishdir">${vInstallDir}/webroot/StudioPackages/${vProjectCode}</core:set>
				<util:file name="${publishdir}" var="newpubdir" />
				<core:set var="publishdirmade" value="${newpubdir.mkdirs()}" />
			</core:if>
			<gel:persist var="XOGEndPoint" value="${XOGEndPoint}" scope="INSTANCE"/>
			<gel:persist var="XOGURL" value="${XOGURL}" scope="INSTANCE"/>
			<gel:persist var="XOGlogFolder" value="${XOGlogFolder}" scope="INSTANCE"/>
			<gel:persist var="XOGwebFolder" value="${XOGwebFolder}" scope="INSTANCE"/>
			<gel:persist var="XOGwebPath" value="${XOGwebPath}" scope="INSTANCE"/>
			<gel:persist var="sessionID" value="${sessionID}" scope="INSTANCE"/>
			<gel:persist var="DebugLevel" value="${DebugLevel}" scope="INSTANCE"/>
			<gel:persist var="dbVendor" value="${dbVendor}" scope="INSTANCE"/>
			<gel:persist var="publishFolder" value="${publishdir}" scope="INSTANCE"/>
		</core:otherwise>
    </core:choose>		
</gel:script>
